%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.6.0-20091004-56-g11921dc
%%CreationDate: Thu Dec 30 16:23:23 2010
%%Title: /home/fosse/Documents/work/startle optical stimulator/simple/power-MiniHex9.sch
%%Author: (null)
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
8113 500 translate 90 rotate
0.454545 0.454545 scale
-40000 -40000 translate
gsave
40000 40000 62000 40000 10 line
62000 40000 62000 57000 10 line
62000 57000 40000 57000 10 line
40000 57000 40000 40000 10 line
57900 40600 57900 40000 10 line
gsave
false false false false 208.000000 [(FILE:) ] 0 54500 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(REVISION:) ] 0 58000 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(DRAWN BY: ) ] 0 58000 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(PAGE) ] 0 54500 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(OF) ] 0 56200 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(TITLE) ] 0 54500 40700 144.444443 text
grestore
54400 40000 62000 40000 10 line
62000 40000 62000 41400 10 line
62000 41400 54400 41400 10 line
54400 41400 54400 40000 10 line
54400 40600 62000 40600 10 line
grestore
gsave
46900 52800 47200 52800 10 line
gsave
false false false false 208.000000 [(2) ] 0 45750 52750 144.444443 text
grestore
46900 52200 47200 52200 10 line
gsave
false false false false 208.000000 [(4) ] 0 45750 52150 144.444443 text
grestore
46900 51600 47200 51600 10 line
gsave
false false false false 208.000000 [(6) ] 0 45750 51550 144.444443 text
grestore
46900 51000 47200 51000 10 line
gsave
false false false false 208.000000 [(8) ] 0 45750 50950 144.444443 text
grestore
46900 53100 47200 53100 10 line
gsave
false false false false 208.000000 [(1) ] 0 45750 53050 144.444443 text
grestore
46900 52500 47200 52500 10 line
gsave
false false false false 208.000000 [(3) ] 0 45750 52450 144.444443 text
grestore
46900 51900 47200 51900 10 line
gsave
false false false false 208.000000 [(5) ] 0 45750 51850 144.444443 text
grestore
46900 51300 47200 51300 10 line
gsave
false false false false 208.000000 [(7) ] 0 45750 51250 144.444443 text
grestore
46900 53100 46000 53100 10 line
46900 52800 46000 52800 10 line
46900 52500 46000 52500 10 line
46900 52200 46000 52200 10 line
46900 51900 46000 51900 10 line
46900 51600 46000 51600 10 line
46900 51300 46000 51300 10 line
46900 51000 46000 51000 10 line
45500 50500 46000 50500 10 line
46000 50500 46000 53300 10 line
46000 53300 45500 53300 10 line
45500 53300 45500 50500 10 line
46900 50700 47200 50700 10 line
gsave
false false false false 208.000000 [(9) ] 0 45750 50650 144.444443 text
grestore
46900 50700 46000 50700 10 line
grestore
gsave
false false false false 260.000000 [(CONN3) ] 0 45500 53800 180.555557 text
grestore
gsave
false false false false 260.000000 [(A white) ] 0 46100 53200 180.555557 text
grestore
gsave
false false false false 260.000000 [(B blue) ] 0 46100 52900 180.555557 text
grestore
gsave
false false false false 260.000000 [(C) ] 0 46100 52600 180.555557 text
grestore
gsave
false false false false 260.000000 [(D green) ] 0 46100 52300 180.555557 text
grestore
gsave
false false false false 260.000000 [(E yellow) ] 0 46100 52000 180.555557 text
grestore
gsave
false false false false 260.000000 [(F) ] 0 46100 51700 180.555557 text
grestore
gsave
false false false false 260.000000 [(H red) ] 0 46100 51400 180.555557 text
grestore
gsave
false false false false 260.000000 [(J black) ] 0 46100 51100 180.555557 text
grestore
gsave
false false false false 260.000000 [(K) ] 0 46100 50800 180.555557 text
grestore
gsave
false false false false 260.000000 [(JUMPER9) ] 0 45500 53400 180.555557 text
grestore
gsave
false false false false 260.000000 [(MiniHex9 on wire leads) ] 0 45500 53600 180.555557 text
grestore
47200 49100 48000 49100 10 line
gsave
false false false false 260.000000 [(Chassis) ] 0 47200 49100 180.555557 text
grestore
48000 49100 48000 53700 10 line
48000 53100 47200 53100 10 line
gsave
false false false false 260.000000 [(Chassis) ] 0 47200 53100 180.555557 text
grestore
47200 52800 49600 52800 10 line
gsave
false false false false 260.000000 [(GND) ] 0 47200 52800 180.555557 text
grestore
48200 46200 48200 52800 10 line
48200 48800 47200 48800 10 line
47200 48500 48400 48500 10 line
gsave
false false false false 260.000000 [(GND) ] 0 47200 48500 180.555557 text
grestore
48400 48500 48400 52500 10 line
48400 52500 47200 52500 10 line
47200 48200 50500 48200 10 line
gsave
false false false false 260.000000 [(-15V) ] 0 47200 48200 180.555557 text
grestore
52500 47600 52500 48000 10 line
48600 52200 47200 52200 10 line
gsave
false false false false 260.000000 [(-15V) ] 0 47200 52200 180.555557 text
grestore
47200 51900 48800 51900 10 line
gsave
false false false false 260.000000 [(+15V) ] 0 47200 51900 180.555557 text
grestore
52500 48800 52500 49200 10 line
48800 47900 47200 47900 10 line
gsave
false false false false 260.000000 [(+15V) ] 0 47200 47900 180.555557 text
grestore
47200 47600 49000 47600 10 line
49000 47600 49000 51600 10 line
49000 51600 47200 51600 10 line
47200 47300 49200 47300 10 line
49200 47300 49200 51300 10 line
49200 51300 47200 51300 10 line
47200 51000 49400 51000 10 line
49400 51000 49400 47000 10 line
49400 47000 47200 47000 10 line
47200 46700 49600 46700 10 line
49600 46700 49600 50700 10 line
49600 50700 47200 50700 10 line
gsave
false false false false 208.000000 [(Generic Mini Hex 9 Power) ] 0 55000 40700 144.444443 text
grestore
gsave
false false false false 208.000000 [(EEF) ] 0 58900 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(1.1) ] 0 58800 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(2) ] 0 55000 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(3) ] 0 56500 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(power-MiniHex9.sch) ] 0 54900 40400 144.444443 text
grestore
gsave
false true false false 208.000000 [(Date: 2010_11_18) ] 0 61900 40400 144.444443 text
grestore
gsave
46900 48800 47200 48800 10 line
gsave
false false false false 208.000000 [(2) ] 0 45750 48750 144.444443 text
grestore
46900 48200 47200 48200 10 line
gsave
false false false false 208.000000 [(4) ] 0 45750 48150 144.444443 text
grestore
46900 47600 47200 47600 10 line
gsave
false false false false 208.000000 [(6) ] 0 45750 47550 144.444443 text
grestore
46900 47000 47200 47000 10 line
gsave
false false false false 208.000000 [(8) ] 0 45750 46950 144.444443 text
grestore
46900 49100 47200 49100 10 line
gsave
false false false false 208.000000 [(1) ] 0 45750 49050 144.444443 text
grestore
46900 48500 47200 48500 10 line
gsave
false false false false 208.000000 [(3) ] 0 45750 48450 144.444443 text
grestore
46900 47900 47200 47900 10 line
gsave
false false false false 208.000000 [(5) ] 0 45750 47850 144.444443 text
grestore
46900 47300 47200 47300 10 line
gsave
false false false false 208.000000 [(7) ] 0 45750 47250 144.444443 text
grestore
46900 49100 46000 49100 10 line
46900 48800 46000 48800 10 line
46900 48500 46000 48500 10 line
46900 48200 46000 48200 10 line
46900 47900 46000 47900 10 line
46900 47600 46000 47600 10 line
46900 47300 46000 47300 10 line
46900 47000 46000 47000 10 line
45500 46500 46000 46500 10 line
46000 46500 46000 49300 10 line
46000 49300 45500 49300 10 line
45500 49300 45500 46500 10 line
46900 46700 47200 46700 10 line
gsave
false false false false 208.000000 [(9) ] 0 45750 46650 144.444443 text
grestore
46900 46700 46000 46700 10 line
grestore
gsave
false false false false 260.000000 [(CONN4) ] 0 45500 49800 180.555557 text
grestore
gsave
false false false false 260.000000 [(A white) ] 0 46100 49200 180.555557 text
grestore
gsave
false false false false 260.000000 [(B blue) ] 0 46100 48900 180.555557 text
grestore
gsave
false false false false 260.000000 [(C) ] 0 46100 48600 180.555557 text
grestore
gsave
false false false false 260.000000 [(D green) ] 0 46100 48300 180.555557 text
grestore
gsave
false false false false 260.000000 [(E yellow) ] 0 46100 48000 180.555557 text
grestore
gsave
false false false false 260.000000 [(F) ] 0 46100 47700 180.555557 text
grestore
gsave
false false false false 260.000000 [(H red) ] 0 46100 47400 180.555557 text
grestore
gsave
false false false false 260.000000 [(J black) ] 0 46100 47100 180.555557 text
grestore
gsave
false false false false 260.000000 [(K) ] 0 46100 46800 180.555557 text
grestore
gsave
false false false false 260.000000 [(MiniHex9 on wire leads) ] 0 45500 49600 180.555557 text
grestore
gsave
false false false false 260.000000 [(JUMPER9) ] 0 45500 49400 180.555557 text
grestore
gsave
52500 49200 52500 49400 10 line
52350 49400 52650 49400 10 line
grestore
gsave
true false false false 260.000000 [(+15V) ] 0 52500 49500 180.555557 text
grestore
gsave
48200 46000 48200 46200 10 line
48100 46000 48300 46000 10 line
48155 45950 48245 45950 10 line
48180 45910 48220 45910 10 line
grestore
gsave
52500 47600 52500 47400 10 line
52650 47400 52350 47400 10 line
grestore
gsave
true false false true 260.000000 [(-15V) ] 0 52500 47300 180.555557 text
grestore
gsave
48000 53700 48000 53900 10 line
47900 54000 48000 53900 10 line
48000 53900 48100 54000 10 line
47900 54000 48000 54100 10 line
48000 54100 48100 54000 10 line
grestore
gsave
true false false false 260.000000 [(TP1) ] 0 48000 54400 180.555557 text
grestore
gsave
true false false false 260.000000 [(ChassisGND) ] 0 48000 54200 180.555557 text
grestore
gsave
50800 48200 50500 48200 10 line
gsave
false true false false 260.000000 [(4) ] 0 50800 48300 180.555557 text
grestore
51200 48400 51500 48400 10 line
gsave
false false false false 260.000000 [(5) ] 0 51210 48500 180.555557 text
grestore
51200 48000 51500 48000 10 line
50800 48200 51160 48350 10 line
50800 49000 50500 49000 10 line
gsave
false true false false 260.000000 [(1) ] 0 50800 49100 180.555557 text
grestore
51200 49200 51500 49200 10 line
gsave
false false false false 260.000000 [(2) ] 0 51210 49300 180.555557 text
grestore
51200 48800 51500 48800 10 line
gsave
false false false false 260.000000 [(3) ] 0 51200 48850 180.555557 text
grestore
50810 49000 51160 49150 10 line
50960 49060 50960 48950 10 line
50960 48350 50960 48270 10 line
50960 48600 50960 48450 10 line
50960 48850 50960 48700 10 line
51160 49200 50 0 360 10 darc
51160 48800 50 0 360 10 darc
51160 48400 50 0 360 10 darc
51160 48000 50 0 360 10 darc
grestore
gsave
true false false false 260.000000 [(S1) ] 0 51010 50000 180.555557 text
grestore
gsave
true false false false 260.000000 [(7201SYAQE) ] 0 50995 49650 180.555557 text
grestore
gsave
true false false false 260.000000 [(CK_7201SYAQE.fp) ] 0 50995 49450 180.555557 text
grestore
gsave
true false false true 260.000000 [(On/Off) ] 0 51000 50000 180.555557 text
grestore
48600 52200 48600 48200 10 line
48800 51900 48800 47900 10 line
51500 48800 55500 48800 10 line
51500 48000 54500 48000 10 line
50500 49000 48800 49000 10 line
gsave
49600 53700 49600 53900 10 line
49500 54000 49600 53900 10 line
49600 53900 49700 54000 10 line
49500 54000 49600 54100 10 line
49600 54100 49700 54000 10 line
grestore
gsave
true false false false 260.000000 [(TP2) ] 0 49600 54400 180.555557 text
grestore
gsave
true false false false 260.000000 [(GND) ] 0 49600 54200 180.555557 text
grestore
49600 52800 49600 53700 10 line
gsave
53500 49000 53500 49200 10 line
53400 49300 53500 49200 10 line
53500 49200 53600 49300 10 line
53400 49300 53500 49400 10 line
53500 49400 53600 49300 10 line
grestore
gsave
true false false false 260.000000 [(TP2) ] 0 53500 49700 180.555557 text
grestore
gsave
true false false false 260.000000 [(+15V) ] 0 53500 49500 180.555557 text
grestore
gsave
54500 49000 54500 49200 10 line
54400 49300 54500 49200 10 line
54500 49200 54600 49300 10 line
54400 49300 54500 49400 10 line
54500 49400 54600 49300 10 line
grestore
gsave
true false false false 260.000000 [(TP3) ] 0 54500 49700 180.555557 text
grestore
gsave
true false false false 260.000000 [(-15V) ] 0 54500 49500 180.555557 text
grestore
53500 48800 53500 49000 10 line
54500 47000 54500 49000 10 line
gsave
55500 48800 55700 48800 10 line
gsave
false true false false 208.000000 [(1) ] 0 55650 48850 144.444443 text
grestore
56400 48800 56200 48800 10 line
gsave
false false false false 208.000000 [(2) ] 0 56250 48850 144.444443 text
grestore
55900 49000 55900 48600 10 line
56200 48800 56000 48800 10 line
55900 48800 55700 48800 10 line
56700 48800 700 165 195 10 darc
55789 49000 55789 48900 10 line
55840 48949 55740 48949 10 line
grestore
gsave
true false false false 260.000000 [(C17) ] 0 55900 49700 180.555557 text
grestore
gsave
true false false false 260.000000 [(4.7uF) ] 0 55900 49500 180.555557 text
grestore
gsave
true false false false 260.000000 [(Electrolytic) ] 0 55900 49300 180.555557 text
grestore
gsave
true false false false 260.000000 [(RCY100P) ] 0 55900 49100 180.555557 text
grestore
gsave
56400 47000 56200 47000 10 line
gsave
false false false false 208.000000 [(1) ] 0 56250 47050 144.444443 text
grestore
55500 47000 55700 47000 10 line
gsave
false true false false 208.000000 [(2) ] 0 55650 47050 144.444443 text
grestore
56000 47200 56000 46800 10 line
55700 47000 55900 47000 10 line
56000 47000 56200 47000 10 line
55200 47000 700 -15 15 10 darc
56111 47200 56111 47100 10 line
56060 47149 56160 47149 10 line
grestore
gsave
true false false false 260.000000 [(C17) ] 0 56000 47900 180.555557 text
grestore
gsave
true false false false 260.000000 [(4.7uF) ] 0 56000 47700 180.555557 text
grestore
gsave
true false false false 260.000000 [(Electrolytic) ] 0 56000 47500 180.555557 text
grestore
gsave
true false false false 260.000000 [(RCY100P) ] 0 56000 47300 180.555557 text
grestore
55500 47000 54500 47000 10 line
56400 48800 57000 48800 10 line
57000 46200 57000 48800 10 line
57000 47000 56400 47000 10 line
gsave
57000 46000 57000 46200 10 line
56900 46000 57100 46000 10 line
56955 45950 57045 45950 10 line
56980 45910 57020 45910 10 line
grestore
gsave
false true false false 208.000000 [(Designed By: IJS) ] 0 61900 40100 144.444443 text
grestore
newpath
48000 53100
25
0 360 arc
fill
newpath
48000 53100
25
0 360 arc
fill
newpath
48000 53100
25
0 360 arc
fill
newpath
48200 52800
25
0 360 arc
fill
newpath
48200 52800
25
0 360 arc
fill
newpath
48200 52800
25
0 360 arc
fill
newpath
48200 48800
25
0 360 arc
fill
newpath
48200 48800
25
0 360 arc
fill
newpath
48200 48800
25
0 360 arc
fill
newpath
48600 48200
25
0 360 arc
fill
newpath
52500 48000
25
0 360 arc
fill
newpath
52500 48000
25
0 360 arc
fill
newpath
52500 48800
25
0 360 arc
fill
newpath
52500 48800
25
0 360 arc
fill
newpath
48600 48200
25
0 360 arc
fill
newpath
48600 48200
25
0 360 arc
fill
newpath
48800 49000
25
0 360 arc
fill
newpath
52500 48800
25
0 360 arc
fill
newpath
53500 48800
25
0 360 arc
fill
newpath
54500 48000
25
0 360 arc
fill
newpath
52500 48000
25
0 360 arc
fill
newpath
54500 48000
25
0 360 arc
fill
newpath
48800 49000
25
0 360 arc
fill
newpath
48800 49000
25
0 360 arc
fill
newpath
53500 48800
25
0 360 arc
fill
newpath
53500 48800
25
0 360 arc
fill
newpath
54500 48000
25
0 360 arc
fill
newpath
57000 47000
25
0 360 arc
fill
newpath
57000 47000
25
0 360 arc
fill
newpath
57000 47000
25
0 360 arc
fill
showpage
%%End
